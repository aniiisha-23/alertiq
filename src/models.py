"""
Data models for the Alert Email Processor.
Defines the structure for emails, LLM responses, and processing records.
"""

from datetime import datetime
from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field, field_validator, ConfigDict


class ActionType(str, Enum):
    """Possible actions that can be taken on an alert."""
    RE_HIT = "Re-hit"
    BACKEND = "Backend"
    CODE = "Code"


class EmailData(BaseModel):
    """Model for email data retrieved from inbox."""
    model_config = ConfigDict(
        json_encoders={datetime: lambda v: v.isoformat()}
    )

    message_id: str
    subject: str
    sender: str
    body: str
    received_date: datetime
    labels: Optional[list[str]] = None


class LLMAnalysis(BaseModel):
    """Model for LLM analysis response."""
    action: ActionType
    reason: str
    confidence: Optional[float] = Field(None, ge=0.0, le=1.0)

    @field_validator("reason")
    @classmethod
    def reason_not_empty(cls, v):
        if not v or not v.strip():
            raise ValueError("Reason cannot be empty")
        return v.strip()


class ProcessedEmail(BaseModel):
    """Model for processed email record."""
    model_config = ConfigDict(
        json_encoders={datetime: lambda v: v.isoformat()}
    )

    id: str = Field(default_factory=lambda: str(datetime.now().timestamp()))
    original_message_id: str
    original_subject: str
    original_sender: str
    processed_at: datetime = Field(default_factory=datetime.now)
    action_taken: ActionType
    reason: str
    sent_to_team: str
    success: bool = True
    error_message: Optional[str] = None


class SummaryEmail(BaseModel):
    """Model for the summary email to be sent to teams."""
    subject: str
    body: str
    recipient: str
    action_type: ActionType
    original_alert_subject: str

    @classmethod
    def from_analysis(
        cls,
        original_email: EmailData,
        analysis: LLMAnalysis,
        recipient: str
    ) -> "SummaryEmail":
        """Create a summary email from original email and LLM analysis."""
        subject = f"Alert Analysis - Action Required: {analysis.action.value}"

        body = f"""Alert: {original_email.subject}
Action: {analysis.action.value}
Details: {analysis.reason}

Original Alert Details:
- Sender: {original_email.sender}
- Received: {original_email.received_date.strftime('%Y-%m-%d %H:%M:%S')}
- Message ID: {original_email.message_id}

Please take appropriate action based on the analysis above.

---
This message was automatically generated by the Alert Email Processor.
"""

        return cls(
            subject=subject,
            body=body,
            recipient=recipient,
            action_type=analysis.action,
            original_alert_subject=original_email.subject
        )
